{"version":3,"file":"6594.nbdime.js","mappings":"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","sources":["webpack://nbdime-webapp/../../node_modules/@lezer/markdown/dist/index.js","webpack://nbdime-webapp/../../node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n        return tree;\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"URL\"] = 33] = \"URL\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// @internal\n        this.dontInject = new Set;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            while (line.depth < this.stack.length)\n                this.finishContext();\n            for (let mark of line.markers)\n                this.addNode(mark.type, mark.from, mark.to);\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        let withoutGaps = taken, end = this.absoluteLineStart + taken;\n        for (let i = 1; i < this.ranges.length; i++) {\n            let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;\n            if (gapFrom >= this.lineStart && gapTo < end)\n                withoutGaps -= gapTo - gapFrom;\n        }\n        this.lineStart += withoutGaps;\n        this.absoluteLineStart += taken;\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dont) {\n    if (dont.has(tree.tree))\n        return tree.tree;\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node;\n        if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dont);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]]\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url)\n            return cx.append(elt(Type.URL, start, start + 1 + url[0].length));\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n            if (title)\n                pos = cx.skipSpace(title.to);\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            cx.dontInject.add(cur.tree);\n            cx.addNode(cur.tree, cur.from - off);\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    URL: tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).\nconst GFM = [Table, TaskList, Strikethrough];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, Prec } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, LanguageSupport } from '@codemirror/language';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\" || cur.name == \"FencedCode\")\n            nodes.push(cur);\n    }\n    let context = [];\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"FencedCode\") {\n            context.push(new Context(node, startPos, startPos, \"\", \"\", \"\", null));\n        }\n        else if (node.name == \"Blockquote\" && (match = /^[ \\t]*>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^([ \\t]*)\\d+([.)])([ \\t]*)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^([ \\t]*)([-+*])([ \\t]{1,4}\\[[ xX]\\])?([ \\t]+)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            // First list item or blank line before: delete a level of markup\n            if (inner.node.firstChild.to >= pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move this line down\n                let insert = \"\";\n                for (let i = 0, e = context.length - 2; i <= e; i++) {\n                    insert += context[i].blank(i < e ? context[i + 1].from - insert.length : null, i < e);\n                }\n                insert += state.lineBreak;\n                return { range: EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? context[i + 1].from - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = state.lineBreak + insert;\n        changes.push({ from, to: pos, insert });\n        return { range: EditorSelection.cursor(from + insert.length), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to)))\n                        return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank(inner.to - inner.from) } };\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlNoMatch.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    return new LanguageSupport(mkLang(parser.configure(extensions)), support);\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["Type","CompositeBlock","constructor","type","value","from","hash","end","children","positions","this","hashProp","contextHash","create","parentHash","addChild","child","pos","prop","length","push","toTree","nodeSet","last","Math","max","types","balance","makeTree","none","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","pop","moveBase","to","moveBaseColumn","findColumn","addMarker","elt","i","goal","scrub","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","space","ListItem","_cx","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","undefined","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","skip","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","dontInject","Set","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","FragmentCursor","readLine","parsedPos","finishContext","mark","reuseFragment","blockParsers","parse","leafBlockParsers","lines","stop","endLeafBlock","finishLeaf","stopAt","RangeError","moveTo","matches","taken","takeNodes","withoutGaps","gapFrom","gapTo","moveRangeI","parentType","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","startComposite","getNodeType","addElement","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dont","has","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","propValues","MarkdownParser","blockNames","inlineParsers","inlineNames","wrappers","super","nodeTypes","Object","t","name","id","createParse","w","configure","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","define","props","Array","isArray","extend","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","build","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Punctuation","RegExp","DefaultInline","escaped","Escapable","append","Entity","exec","InlineCode","curSize","HTMLTag","url","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","open","close","emp","closeSize","k","element","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","add","is","markdownHighlighting","quote","contentSeparator","heading1","heading2","heading3","heading4","heading5","heading6","escape","character","emphasis","strong","list","monospace","processingInstruction","labelName","string","keys","map","n","leftOverSpace","nextPos","StrikethroughDelim","Strikethrough","strikethrough","parseRow","startI","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","Table","heading","TaskParser","GFM","atom","parseSubSuper","Superscript","special","Subscript","Emoji","match","data","commentTokens","headingProp","commonmark","isHeading","state","doc","lineAt","findSectionEnd","headerNode","level","headerIndent","of","resolveInner","mkLang","commonmarkLanguage","markdownLanguage","Context","spaceBefore","spaceAfter","item","blank","maxWidth","marker","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","insertNewlineContinueMarkup","dispatch","changeByRange","range","empty","isActiveAt","emptyLine","delTo","lineBreak","prevLine","quoted","index","continued","charAt","update","scrollIntoView","userEvent","isMark","deleteMarkupBackward","scan","childBefore","lastChild","contextNodeForDelete","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","addKeymap","defaultCode","extensions","support","language","codeParser","languages","defaultLanguage","info","matchLanguageName","getSkippingParser","load","htmlParser","overlay","infoNode","getChild","parseCode","high"],"sourceRoot":""}