# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .project_extended_response_model_target_audience import ProjectExtendedResponseModelTargetAudience
from .project_state import ProjectState
from .project_extended_response_model_access_level import ProjectExtendedResponseModelAccessLevel
from .project_extended_response_model_quality_preset import ProjectExtendedResponseModelQualityPreset
from .chapter_response import ChapterResponse
from .pronunciation_dictionary_version_response_model import PronunciationDictionaryVersionResponseModel
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class ProjectExtendedResponseModel(UncheckedBaseModel):
    project_id: str
    name: str
    create_date_unix: int
    default_title_voice_id: str
    default_paragraph_voice_id: str
    default_model_id: str
    last_conversion_date_unix: typing.Optional[int] = None
    can_be_downloaded: bool
    title: typing.Optional[str] = None
    author: typing.Optional[str] = None
    description: typing.Optional[str] = None
    genres: typing.Optional[typing.List[str]] = None
    cover_image_url: typing.Optional[str] = None
    target_audience: typing.Optional[ProjectExtendedResponseModelTargetAudience] = None
    language: typing.Optional[str] = None
    content_type: typing.Optional[str] = None
    original_publication_date: typing.Optional[str] = None
    mature_content: typing.Optional[bool] = None
    isbn_number: typing.Optional[str] = None
    volume_normalization: bool
    state: ProjectState
    access_level: ProjectExtendedResponseModelAccessLevel
    quality_preset: ProjectExtendedResponseModelQualityPreset
    chapters: typing.List[ChapterResponse]
    pronunciation_dictionary_versions: typing.List[PronunciationDictionaryVersionResponseModel]
    experimental: typing.Dict[str, typing.Optional[typing.Any]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
